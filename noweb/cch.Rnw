\section{Case-cohort function}
This function was originally written by Norman Breslow, then adapted
to the survival library by Thomas Lumley. 
Poor interaction with the \code{aeqSurv} function prompted a refactoring of
the code.

The method is an ordinary Cox model coupled with modification of the input
data along with additional computation for the variance.  
A case-cohort study begins with a cohort of interest for which complete
sampling is infeasable.  A random subcohort is chosen
for follow up, and then that subcohort is augmented by any subjects for
whom an event occurs.
Let $n$ be the number in the study and $m$ the number who were sampled.
Consider an event at day 100 who was not part of the subcohort.  Who is
the risk set for this event?

\begin{itemize}
   \item The Prentice estimate uses as a risk set all the subcohort members 
     at risk on day 100 + this failure.  To accomplish this we use (start,stop]
     data, and make the non-subcohort event a very short interval of
     ($100 - \epsilon$, 100].  The value of epsilon should be small enough
      that no other events fall in the interval, but large enough to preclude
      round off error.
    \item The Self-Prentice estimate was developed in a later paper on the
      asymptotic variance.
      For this the risk set does not include the non-subcohrt failure.
      This can be effectively accomplished by giving non-sucohort failures
      an offset of -100.  They are still in the risk set, but with an effective
      weight of $\exp(-100) < 10^{-40}$ so have no effect.
    \item The Yin-Ling method leaves everyone in the sample, but reweights
      the non-events.  Let $n$ be the number of non-events in the cohort
      and $m$ the non-events in the subcohort, and reweight all non-events by
      $n/m$.  The events have weight 1, since they will always be included.
      This is a simple survey sampling correction.
    \item Borgan et. al. considered estimates for the case where stratified
      sampling has been done, with one or more of the strata oversampled.
      Their estimator I is the Self-Prentice, but with a case weight of
      $n_k/m_k$ for subcohort members in stratum $k$.  Each event is compared
      to a population averge covariate rather than a sample average covariate.
      Estimator II is the same, but using the Prentice estimate; non-subcohort
      events have a weight of 1.
    \item Borgan et. al. consider several other estimators which are not
      included here.  Method III uses subsampling, and there are variants 
      of I and II that use time dependent stratum weights.  
\end{itemize}

The historical input arguments are a bit of a mess: the three that could
be part of a data frame were represented as one-sided formulas if they
were part of the data frame, and simple expressions otherwise.  
This precludes the use of an na.action or subset argument.
To rectify that make these part of the standard model.frame processing,
We need to find out if the user handed a formula to us, but without
evaluating them.  If any of them are, then make sure it is a legal formula
of the form \code{\textasciitilde x} for some single variable, and then 
replace the formula with the variable name.

<<cch>>=
cch <- function(formula, data, weights, subset, na.action,
                subcoh, id, stratum, cohort.size, 
                method=c("Prentice", "SelfPrentice", "LinYing", "I.Borgan",
                         "II.Borgan"), robust = FALSE, control, ...) {
    method <- match.arg(method)
    Call <- match.call()
    if (missing(control)) control <- coxph.control(...)  

    for (i in c("subcoh", "id", "stratum")) {
        if (inherits(Call[[i]], 'formula')) {
            if (length(Call[[i]]) != 2 || !is.name(Call[[i]][[2]])
                stop("a formula used for ", i, 
                     "must have a single variable and no response")
            Call[[i]] <- Call[[i]][[2]]
        }
    }	

    # Grab the data.  This is identical to coxph, but with 3
    #  more matching arguments
    indx <- match(c("formula", "data", "weights", "subset", "na.action",
                    "subcoh", "id", "stratum"),
                  names(Call), nomatch=0) 
    if (indx[1] ==0) stop("a formula argument is required")
    temp <- Call[c(1,indx)]  # only keep the arguments we wanted
    temp[[1L]] <- quote(stats::model.frame)  # change the function called

    special <- c("strata", "cluster")
    temp$formula <- if(missing(data)) terms(formula, special)
                    else              terms(formula, special, data=data)
      
    mf <- eval(temp, parent.frame())
    if (nrow(mf) ==0) stop("No (non-missing) observations")
    Terms <- terms(mf)

    Y <- model.extract(mf, "response")
    if (!inherits(Y, "Surv")) stop("Response must be a survival object")
    type <- attr(Y, "type")
    if (type!='right' && type!='counting')
        stop(paste("Cox model doesn't support \"", type,
                          "\" survival data", sep=''))
    if (control$timefix) Y <- aeqSurv(Y)
    <<coxph-bothsides>>

    strats <- attr(Terms, "specials")$strata
    if (length(strats)) {
	stemp <- untangle.specials(Terms, 'strata', 1)
	if (length(stemp$vars)==1) strata.keep <- mf[[stemp$vars]]
	else strata.keep <- strata(mf[,stemp$vars], shortlabel=TRUE)
	strats <- as.numeric(strata.keep)
	}
  
    cluster<- attr(Terms, "specials")$cluster
    if (length(cluster)) {
        robust <- TRUE  #flag to later compute a robust variance
        tempc <- untangle.specials(Terms, 'cluster', 1:10)
        ord <- attr(Terms, 'order')[tempc$terms]
        if (any(ord>1)) stop ("Cluster can not be used in an interaction")
        cluster <- strata(mf[,tempc$vars], shortlabel=TRUE)  #allow multiples
        dropterms <- tempc$terms  #we won't want this in the X matrix
        # Save away xlevels after removing cluster (we don't want to save upteen
        #  levels of that variable, which we will never need).
        xlevels <- .getXlevels(Terms[-tempc$terms], mf)
    }
     else {
        dropterms <- NULL
        if (missing(robust)) robust <- FALSE
        xlevels <- .getXlevels(Terms, mf)
    }
    <<coxph-make-X>>
    <<cch-setup>>
    <<cch-compute>>
    <<cch-var>>
    <<cch-finish>>
}
@

Now we have the main ingredients.  The first task is to see if 
any of the \code{id, subcoh, or stratum} arguments were present.
The \code{stratum} argument is not the same as the strata term in 
the model.
The asymptotic variance formula requires knowlege of $n$, which is
found in the \code{cohort.size} argument,
the robust variance does not require this.

<<cch-setup>>=
n <- nrow(Y)
id <- model.extract(mf, "<id>")
subcoh <- model.extract(mf, "<subcoh>")
stratum <- model.extract(mf, "<stratum>")
weight  <- model.weights(mf)
if (length(weight)==0)) weight <- rep(1.0, n)

offset <- model.offset(mf)
if (length(offset) ==0) {
    has.offset <- FALSE
    offset <- rep(0., n)
} 
else has.offset <- TRUE

status <- Y[,ncol(Y)]
if (is.null(subcoh)) stop("a subcoh argument is required")
else {
    if (is.logical(subcoh)) subcoh <- as.numeric(subcoh)
    else if (!is.numeric(subcoh)) stop("subcoh must be numeric or logical")
    else if (any(subcoh!=0 & subcoh !=1))
        stop("numeric subcoh values must be 0 or 1")
    if (any(status==0 & subcoh==0))
        stop("all observations outside the subcohort must be events")
    }

if (length(stratum) > 0) {
    if (missing(cohort.size))
        stop("the estimates for stratified sampling require cohort.size")
    scount <- table(stratum)
    indx <- match(names(cohort.size), names(scount))
    phat <- scount/cohort.size[indx]
    if (any(is.na(phat)))
        stop("no cohort.size element found for strata", 
             (names(scount))[is.na(phat)])
    if (any(phat <=0 | phat >1))
        stop("strata sampling fraction that is <=0 or > 1")
    windex <- match(stratum, names(scount))
    weight[status==0] <- (weight /phat[windex])[status==0] 
}
@

The computation has 3 branches, Prentice, Self-Prentice, and Lin-Ying.
<<cch-compute>>=
if (ncol(Y) ==2)  {
    etime <- Y[,1]
    status <- Y[,2]
}
else {
    etime <- Y[,2]
    status <- Y[,3]
}

if (method=="Prentice" || method=="II.Borgan") {
    # construct fake entry times for the non-cohort
    delta <- min(diff(sort(unique(etime[status==1])))) # min time between times
    fake <- etime[subco==0] - delta/2
    if (ncol(Y) ==2) {
        temp <- rep(0., n) 
        temp[subco==0] <- fake
        Y <- cbind(temp, Y)
    }
    else Y[subco==0, 1] <- fake

    fit <- agreg.fit(X, Y, strata, offset, init, control, weights,
                     method, rownames)
}
else if (method== "Self-Prentice" || method= "I.Borgan") {
    # Use an offset
    offset[subco==1] <- offset[subco==0] - 100
    if (ncol(Y) ==2)
        fit <- coxph.fit(X, Y, strata, offset, init, control, weights,
                         method, rownames)
    else
        fit <- coxph.fit(X, Y, strata, offset, init, control, weights,
                         method, rownames)
}
else { # Lin-Ying method
    if (missing(cohort.size)) 
        stop("Lin-Ying method requires the cohort size")
    else if (!numeric(cohort.size)) stop("cohort size must be numeric")
    else if (length(cohort.size) > 1)
        stop("cohort size must be numeric, with one value per stratum")
    nd <- sum(status)  # number of events
    nc <- sum(subcoh)  # number in subcohort
    ncd <- sum(status*subcoh)  # number of events in subcohort
    lyweight <- (cohort.size - nd)/(nc - ncd)
    weight[status==0] <- weight[status==0]* lyweight

    if (ncol(Y) ==2)
        fit <- coxph.fit(X, Y, strata, offset, init, control, weights,
                         method, rownames)
    else
        fit <- coxph.fit(X, Y, strata, offset, init, control, weights,
                         method, rownames)
    }
@ 

There are two possible variances for the estimate.  The asymptotic
variance
